<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace Licence\Form\Base;

use Licence\Licence;
use Thelia\Form\BaseForm;
use Symfony\Component\Validator\Constraints\NotBlank;

/**
 * Class LicenceCreateForm
 * @package Licence\Form\Base
 * @author TheliaStudio
 */
class LicenceCreateForm extends BaseForm
{
    const FORM_NAME = "Licence_create";

    public function buildForm()
    {
        $translationKeys = $this->getTranslationKeys();
        $fieldsIdKeys = $this->getFieldsIdKeys();

        $this->addOrderIdField($translationKeys, $fieldsIdKeys);
        $this->addCustomerIdField($translationKeys, $fieldsIdKeys);
        $this->addProductIdField($translationKeys, $fieldsIdKeys);
        $this->addProductKeyField($translationKeys, $fieldsIdKeys);
        $this->addActiveMachineField($translationKeys, $fieldsIdKeys);
        $this->addExpirationDateField($translationKeys, $fieldsIdKeys);
    }

    protected function addOrderIdField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("order_id", "integer", array(
            "label" => $this->translator->trans($this->readKey("order_id", $translationKeys), [], Licence::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("order_id", $fieldsIdKeys)],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    protected function addCustomerIdField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("customer_id", "integer", array(
            "label" => $this->translator->trans($this->readKey("customer_id", $translationKeys), [], Licence::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("customer_id", $fieldsIdKeys)],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    protected function addProductIdField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("product_id", "integer", array(
            "label" => $this->translator->trans($this->readKey("product_id", $translationKeys), [], Licence::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("product_id", $fieldsIdKeys)],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    protected function addProductKeyField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("product_key", "textarea", array(
            "label" => $this->translator->trans($this->readKey("product_key", $translationKeys), [], Licence::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("product_key", $fieldsIdKeys)],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    protected function addActiveMachineField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("active_machine", "textarea", array(
            "label" => $this->translator->trans($this->readKey("active_machine", $translationKeys), [], Licence::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("active_machine", $fieldsIdKeys)],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    protected function addExpirationDateField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder->add("expiration_date", "date", array(
            "label" => $this->translator->trans($this->readKey("expiration_date", $translationKeys), [], Licence::MESSAGE_DOMAIN),
            "label_attr" => ["for" => $this->readKey("expiration_date", $fieldsIdKeys)],
            "required" => false,
            "constraints" => array(
            ),
            "attr" => array(
            )
        ));
    }

    public function getName()
    {
        return static::FORM_NAME;
    }

    public function readKey($key, array $keys, $default = '')
    {
        if (isset($keys[$key])) {
            return $keys[$key];
        }

        return $default;
    }

    public function getTranslationKeys()
    {
        return array();
    }

    public function getFieldsIdKeys()
    {
        return array(
            "order_id" => "Licence_order_id",
            "customer_id" => "Licence_customer_id",
            "product_id" => "Licence_product_id",
            "product_key" => "Licence_product_key",
            "active_machine" => "Licence_active_machine",
            "expiration_date" => "Licence_expiration_date",
        );
    }
}
